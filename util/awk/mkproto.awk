# $Id: mkproto.awk,v 1.1 2006/03/09 17:34:19 rick Exp $
# Generates a file of C prototypes
# Additional information for Doxygen file definition added
# Add any type definitions to regular expressions below.
#
# To exclude a prototype, add whitespace before first definition.
# functions which start with static and extern are also excluded.
# Similar to ancient Unix command mkproto. Many versions of this are public
# around the net. Usually the variants trace back to Tridge, but the old
# unix command was first.
#
# Customized for consumer doxygen, but a few modifications to addtogroup with
# variables and you are off and running.

BEGIN {
  inheader=0;
  current_file="";
  if (headerdefine == "") {headerdefine = "PROTO_H"}
  if (headerdox == "") {headerdox = substr(headerdefine,1,match(headerdefine,/_/)-1);}
  if (headername == "") {headername = "proto.h"}
  print "#ifndef",headerdefine
  print "#define",headerdefine
  print ""
# Source directory specific doxygen tags
  print "/**"
  print " * @file "
  print " * @brief All prototypes grouped by file."
  print " *"
  print " * A reference file for all globally defined functions and procedures."
  print " *"
  print " * @remark This file is automatically generated with \"make proto\". DO NOT EDIT"
  print " */"
  print ""
  print "/** @addtogroup eembc_consumer Version 2 Consumer Benchmarks"
  print " * @{ */"
  print "/** @addtogroup",headerdefine,headerdox,"Application Program Interface"
  print " * @{ */"
}

{
  if (FILENAME!=current_file) {
    print ""
    print "/* The following definitions come from ",FILENAME," */"
    print ""
    current_file=FILENAME
  }
  if (inheader) {
    if (match($0,"[)][ \t]*$")) {
      inheader = 0;
      printf "%s;\n",$0;
    } else {
      printf "%s\n",$0;
    }
    next;
  }
}

/^static|^extern/ || !/^[a-zA-Z]/ || /[;]/ {
  next;
}

!/^unsigned|^signed|^mode_t|^DIR|^user|^int|^float|^double|^char|^struct|^BOOL|^void|^time|^FILE|^long/ {
  next;
}


/[(].*[)][ \t]*$/ {
    printf "%s;\n",$0;
    next;
}

/[(]/ {
  inheader=1;
  printf "%s\n",$0;
  next;
}

END {
  print ""
# Source directory specific doxygen tags
  print "/** @} */"
  print "/** @} */"
  print "#endif /* ",headerdefine," */"
  print ""
}

