#!/bin/sh
#==============================================================================
#$RCSfile: cinit.sh,v $
#
#   DESC : Build C file to load entire library into RAM file system.
#
# AUTHOR : Rick Foos, ECL, LLC 
#
#    CVS : $Revision: 1.3 $
#------------------------------------------------------------------------------
# Copyright (c) 1998-2005 by the EDN Embedded Microprocessor 
# Benchmark Consortium (EEMBC), Inc. All Rights Reserved.
#==============================================================================

# Setup shell independant method for echo -n
# Usage: echo $ECHO_N "... $ECHO_C"

case `echo "testing\c"; echo 1,2,3`,`echo -n testing; echo 1,2,3` in
  *c*,-n*) ECHO_N= ECHO_C='
' ECHO_T='	' ;;
  *c*,*  ) ECHO_N=-n ECHO_C= ECHO_T= ;;
  *)       ECHO_N= ECHO_C='\c' ECHO_T= ;;
esac

# Constant used for file suffix key
INITC=_init.c
# User Message Prefix
MSGPREFIX="CINIT : "
# Debug message flag. Set to 1 for debug.
CINITDEBUG=0

# Now we are going to start working
echo "${MSGPREFIX}BEGIN" 1>&2

# Global comment block for generated files.
PREAMBLE="
/**
 * @file
 * Generated by $0 on `date`
 *
 * Copyright (c) 1998-2005 by the EDN Embedded Microprocessor 
 * Benchmark Consortium (EEMBC), Inc. All Rights Reserved.
 */

"
# Only used when USE_TH_FILEIO is inserted. (Multiple file case)
PREINCLUDES="
/** Get definition of USE_TH_FILEIO. */
#include \"thcfg.h\"

"

if [ $CINITDEBUG = 1 ] 
then
	echo "${MSGPREFIX}PREINCLUDES" 1>&2
	echo "${PREINCLUDES}" 1>&2
fi

# Usage Message, only two possible errors.
Usage="
Usage:
cinit.sh [options] [(directory of _init.c files> | * ] [<library name> | files]
Options:
	-s	Produce Single file DATA_x program.

Examples:
./cinit.sh
"
# Process options, and shift them away.
SINGLEFILE=0
if [ "$1" = "-s" ]
then
	SINGLEFILE=1
	shift
	echo "${MSGPREFIX}Single file mode." 1>&2
else
	echo "${MSGPREFIX}Multiple file mode." 1>&2
fi

# Process ARGUMENTS directory name, and possibly library name

if [ ! -z "$1" ] && [ -d "$1" ]; then

# $1 is not null, and is a directory

SDIR="$1"
[ "$2" = "" ] || LIBNAME="$2"

else

# If $1 is not a directory, and $2 is supplied, 
# this is probably not what was intended, die.
[ "$2" = "" ] || (echo "${Usage}" 1>&2; exit)

# Set default directory, and set libname to $1

SDIR="./"
[ "$1" = "" ] || LIBNAME="$1"
fi

# Set libname to default value.

[ "${LIBNAME}" = "" ] && LIBNAME="files"
# END Process ARGUMENTS directory name, and possibly library name

# Tell user what we are doing...
echo "${MSGPREFIX}generating calls for ${LIBNAME}" 1>&2

# Collect Source files from CHEADER
SFILE=`ls ${SDIR}/*_init.c`
[ -z "${SFILE}" ] && echo "${Usage}"
[ -z "${SFILE}" ] && exit 1

# Begin subroutine section of multifile
BEGINSUB="

/** Initialize Test Harness file system for ${LIBNAME}, all files. */
void init_${LIBNAME}(void)
{
#if USE_TH_FILEIO
"

# Begin subroutine section of single file
SBEGINSUB="

/** Initialize Test Harness file system for ${LIBNAME}, single file based on DATA_x define. */
void single_${LIBNAME}(void);
void single_${LIBNAME}(void)
{
#if USE_TH_FILEIO
"
ENDSUB="
#endif /* USE_TH_FILEIO */
}

"

# Start the file
echo "${PREAMBLE}"

# Insert thcfg.h if inserting USE_TH_FILEIO, and we always do...
echo "${PREINCLUDES}"
echo "${MSGPREFIX}Including Harness Headers" 1>&2

# Generate Prototype Section
echo $ECHO_N "${MSGPREFIX}Generating Prototypes... $ECHO_C" 1>&2
for i in ${SFILE}
do
fsub=`echo $i | sed -e "s|_init.c||" | sed -e "s|\(.*\)_|\1.|"`
csub=`echo $i | sed -e "s|.*/||" | sed -e "s|_init.c||" | sed -e "s|-|_|g"`
[ "${csub}" = "${LIBNAME}" ] && continue

# Build single file ifdef block
subname="void init_$csub(void);"
if [ $SINGLEFILE != 0 ]
then
	dataname="const char *DATANAME=\"$fsub\";"
	if [ $SINGLEFILE = 1 ]
	then
		echo "#if 	(TRAINING==1)"
		default_dataname=$dataname
		default_subname=$subname
		# Initialize Log File
		echo "Generated Data Definitions for ${LIBNAME}_single.c" >${LIBNAME}.log
		echo "Data	Filename" >>${LIBNAME}.log
		echo "DATA_$SINGLEFILE	$fsub" >>${LIBNAME}.log
	else
		echo "#elif	defined(DATA_$SINGLEFILE)"
		# Add to Log File
		echo "DATA_$SINGLEFILE	$fsub" >>${LIBNAME}.log
	fi
	echo "$dataname"
	SINGLEFILE=`expr $SINGLEFILE + 1`
fi

echo "$subname"
done

if [ $SINGLEFILE != 0 ] 
then
	echo "#else"
	echo "$default_dataname"
	echo "$default_subname"
	echo "#endif"
fi

echo "done" 1>&2

# Start the function
if [ $SINGLEFILE = 0 ]
then
	echo "${BEGINSUB}"
else
	echo "${SBEGINSUB}"
	SINGLEFILE=1
fi

# Generate Function calls
echo $ECHO_N "${MSGPREFIX}Generating Functions... $ECHO_C" 1>&2
for i in ${SFILE}
do
csub=`echo $i | sed -e "s|.*/||" | sed -e "s|_init.c||" | sed -e "s|-|_|g"`
[ "${csub}" = "${LIBNAME}" ] && continue

# Build single file ifdef block, DATA_1 Default
subname="   init_$csub();"
if [ $SINGLEFILE != 0 ]
then
	if [ $SINGLEFILE = 1 ]
	then
		echo "#if 	(TRAINING==1)"
		default_subname=$subname
	else
		echo "#elif	defined(DATA_$SINGLEFILE)"
	fi
SINGLEFILE=`expr $SINGLEFILE + 1`
fi

echo "$subname"
done

if [ $SINGLEFILE != 0 ]
then
	echo "#else"
	echo "$default_subname"
	echo "#endif"
fi

echo "done" 1>&2
echo "${ENDSUB}"
echo "${MSGPREFIX}END" 1>&2

