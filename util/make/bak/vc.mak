#==============================================================================
#$RCSfile: vc.mak,v $
#
#   DESC : Microsoft VC++ Tool Definition, Host Compile and Run
#
# AUTHOR : Rick Foos, ECL, LLC
#
#  EEMBC : Technical Advisory Group (TechTAG)
#
#    CVS : $Revision: 1.43 $
#------------------------------------------------------------------------------
# Copyright (c) 1998-2005 by the EDN Embedded Microprocessor 
# Benchmark Consortium (EEMBC), Inc. All Rights Reserved.
#==============================================================================
# For information on Microsoft Visual Studio
#
# http://msdn.microsoft.com/vstudio/

# ARCHITECTURE SECTION
# Any specific options 

# SYSTEM ENVIRONMENT SECTION

# Tools Root Directory
# Assumes vcvars32.bat has been executed. Paths not OS neutral
# $(MSVCDIR) will not work because of backslashes in directories
#TOOLS		= "c:/progra~1/micros~3/vc98"
TOOLS		= "/cygdrive/c/Program Files/Microsoft Visual Studio/VC98"
#TOOLPATH	= "c:/progra~1/micros~3"
TOOLPATH	= "/cygdrive/c/Program Files/Microsoft Visual Studio"

# From VCVARS32.BAT, MODIFIED FOR GCC MAKE ENVIRONMENT
# Root of Visual Developer Studio Common files.
VSCommonDir=$(TOOLPATH)/Common

# Root of Visual Developer Studio installed files.
MSDevDir=$(TOOLPATH)/Common/msdev98

# Root of Visual C++ installed files.
MSVCDir=$(TOOLPATH)/VC98

# VcOsDir is used to help create either a Windows 95 or Windows NT specific path.

ifeq ($(OS),Windows_NT)
VcOsDir=WINNT
else
VcOsDir=WIN95
endif

ifeq ($(OS),Windows_NT)
# Windows NT
PATH +=:$(MSDevDir)/BIN:$(MSVCDir)/BIN:$(VSCommonDir)/TOOLS/$(VcOsDir):$(VSCommonDir)/TOOLS
else
# Windows ME/9x
PATH +=:"$(MSDevDir)/BIN":"$(MSVCDir)/BIN":"$(VSCommonDir)/TOOLS/$(VcOsDir)":"$(VSCommonDir)/TOOLS":"$(windir)/SYSTEM"
endif

# Differs from Path processing on Windows
#INCLUDE +=:$(MSVCDir)/ATL/INCLUDE:$(MSVCDir)/INCLUDE:$(MSVCDir)/MFC/INCLUDE
#LIB +=:$(MSVCDir)/LIB:$(MSVCDir)/MFC/LIB

#set VcOsDir=
#set VSCommonDir=

# Tools Executables, Output File Flag and Output File Types

CC		= $(TOOLS)/bin/cl
OBJOUT	= /Fo
COBJT	= /c
CINCD	= /I
CDEFN	= /D 
CUDEFN	= /U

OBJ		=.obj

AS		= $(TOOLS)/bin/cl

LD		= $(TOOLS)/bin/cl
EXEOUT	= /Fe
EXE		= .exe

AR		= $(TOOLS)/bin/lib
LIBTYPE	= .lib
LIBOUT = -OUT:

# COMPILER SECTION

# You may need to override the Environment variable INCLUDE.
# INCLUDE is used by most compilers, and should not 
# be passed to the compiler in the makefile.
#INCLUDE=$(TOOLS)/include

# /c             compile but do not link
# /o             specify the output file name
# /ML		     Link with LIBC.LIB
# /GX			 Enable C++ EH, extern C defaults to nothrow
# /Od			 Disable Optimization
# /O2			 Optimize for Speed
# /Za            Disable Extensions (DO NOT USE THIS)

# Define your non-default compiler capabilities here for thconfig.h
AUTOCONF_DEFINES=
# Visual C Prefers quotes around the defines.
# This is just an example, MSVC needs so many of these they are
# directly in the files as #ifdef _MSC_VER
#	$(CDEFN)"HAVE_INTTYPES_H=1"

# Base definitions needed for a console application.
VC_NDEBUG=\
	$(CDEFN)"NDEBUG" \
	$(CDEFN)"WIN32" \
	$(CDEFN)"_CONSOLE" \
	$(CDEFN)"_MBCS"

# Debug Base definitions needed for a console application.
VC_DEBUG=\
	$(CDEFN)"_DEBUG" \
	$(CDEFN)"WIN32" \
	$(CDEFN)"_CONSOLE" 

COMPILER_FLAGS = /nologo /ML  /GX /O2 /Zm1500 $(VC_NDEBUG) $(AUTOCONF_DEFINES)
COMPILER_NOOPT = /nologo /ML  /GX /Od /Zm1500 $(VC_NDEBUG) $(AUTOCONF_DEFINES)
COMPILER_DEBUG = /nologo /MLd /GX /Od /Gm /ZI /Zm1500 $(VC_DEBUG) $(AUTOCONF_DEFINES)

WARNING_OPTIONS= /W4

# Additional include files not in dependancies or system include.
COMPILER_INCLUDES =

# Optional: Passed to compiler, here or in makefile to override THCFG defines.
#COMPILER_DEFINES = 

# ASSEMBLER SECTION

ASSEMBLER_FLAGS		= 
ASSEMBLER_INCLUDES	=

# LINKER SECTION

LINKER_FLAGS	=
LINKER_INCLUDES	=
# Some linkers do not re-scan libraries, and require some libraries 
# to be placed last on the command line to resolve references.
LINKER_LAST 	= /ML

# LIBRARIAN SECTION
LIBRARY_FLAGS	= 

# SIZE SECTION
SIZE			= $(TOOLS)/bin/dumpbin 
SIZE_FLAGS		= -summary
AWKSZ			= $(TOOLCHAIN)
AWKDIR			= awk

# IMAGE SECTION
IMAGE			= 
IM_FLAGS		= 
IMG				= 

# CONTROL SECTION
RUN_FLAGS		= 
RUN				=

# Add any run output arguments (after stdout redirection)
#RUN_LASTOUT=2>&1
RUN_LASTOUT=

# Add command line arguments to the program or shell script.
# For simulators, you can reduce the iterations here.
#CMDLINE		+= -iter 1
#CMDLINE_LITE	+= -iter 1
CMDLINE			+=
CMDLINE_LITE	+=

# Describes how much to build. To compile only, "mkdir targets"
ALL_TARGETS		= mkdir targets run results

# Optional specific files for specialized run and results
PLATFORM=x86

# Optional re-use of dependency files generated by makerule.pl
TARGETS			= $(TOOLCHAIN)
