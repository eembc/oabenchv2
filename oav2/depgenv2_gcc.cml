#==============================================================================
#$RCSfile: depgenv2_gcc.cml,v $
#
#   DESC : Generate Benchmark dependancies for gcc on x86
#
# AUTHOR : Rick Foos, ECL, LLC
#
#  EEMBC : Office Automation
#
#    CVS : $Revision: 1.40 $
#------------------------------------------------------------------------------
# Copyright (c) 1998-2005 by the EDN Embedded Microprocessor
# Benchmark Consortium (EEMBC), Inc. All Rights Reserved.
#==============================================================================

#
# IMPORTANT: Name of generated output file.
#
-tf targetsv2_gcc.mak

# ignore test harness headers in benchmark source
# so we can do both th and th_lite seperately from a makefile.
-g anytoi.h
-g eembc_dt.h
-g fileio.h
-g thcfg.h
-g thlib.h
-g uuencode.h
-g verify.h

# Redirection header files for new benchmarks.
-g thassert.h
-g thdirent.h
-g therror.h
-g thmalloc.h
-g threent.h
-g thstat.h
-g thstdio.h
-g thstring.h
-g thtypes.h
-g thtime.h
-g thunistd.h
-g thstdlib.h
-g therrno.h
-g thfcntl.h
-g thconfig.h
-g thstdint.h

# Benchmark Build
# THOBJS generated by th/TOOLCHAIN/depgen.cml -> harness.mak
# LITE, BINBUILD, OBJ and EXE are generated by makefile

# Applies to all benchmarks
-b $(OBJ)
-a "$(BMDEPS)"
-to $(BINBUILD)
-tb $(LITE)$(EXE)
-tr "$(LINK)"
-ta "$(THOBJS)"
-te "$(THLIB)"
-te "$(LINKER_LAST)"
-co $(OBJOUT)
-ce $(EXEOUT)
-g bmark_lite.c
-g bmark_816.c
-z bmark.c
-zb $(LITE)


# The Benchmarks

-t empty
-o $(OBJBUILD)/empty
-r "$(COM) $(CINCD)empty $(CDEFN)ITERATIONS=$(empty)"

empty/*.c

-td  # dump the empty target

# Remove all libraries
-tax
-tex

# Restore Harness Libraries
-ta "$(THOBJS)"
-te "$(THLIB)"

# Add bez Library (data files for bezier benchmark)
-ta "$(OBJBUILD)/libbez/libbez$(LIBTYPE)"
-te "$(OBJBUILD)/libbez/libbez$(LIBTYPE)"

# End of Additional Library Section
-te "$(LINKER_LAST)"

-t bezierv2fixed
-o $(OBJBUILD)/bezierv2fixed
-r "$(COM) $(CINCD)bezierv2 $(CDEFN)DATA_2 $(CDEFN)USE_FPU=0 $(CDEFN)ITERATIONS=$(bezierv2fixeddata2)"

bezierv2/*.c

-td  # dump the bezierv2fixed target

-t bezierv2float
-o $(OBJBUILD)/bezierv2float
-r "$(COM) $(CINCD)bezierv2 $(CDEFN)DATA_2 $(CDEFN)USE_FPU=1 $(CDEFN)ITERATIONS=$(bezierv2floatdata2)"

bezierv2/*.c

-td  # dump the bezierv2float target

# Remove all libraries
-tax
-tex

# Restore Harness Libraries
-ta "$(THOBJS)"
-te "$(THLIB)"

# Add TXT Library
-ta "$(OBJBUILD)/libtxt/libtxt$(LIBTYPE)"
-te "$(OBJBUILD)/libtxt/libtxt$(LIBTYPE)"

# End of Additional Library Section
-te "$(LINKER_LAST)"

-t textv2
-o $(OBJBUILD)/textv2
-r "$(COM) $(CINCD)textv2 $(CDEFN)DATA_2 $(CDEFN)ITERATIONS=$(textv2data2)"

textv2/*.c

-td  # dump the textv2 target

# Remove all libraries
-tax
-tex

# Restore Harness Libraries
-ta "$(THOBJS)"
-te "$(THLIB)"

# Add PGM Library
-ta "$(OBJBUILD)/libpgm/libpgm$(LIBTYPE)"
-te "$(OBJBUILD)/libpgm/libpgm$(LIBTYPE)"

# End of Additional Library Section
-te "$(LINKER_LAST)"

-t ditherv2
-o $(OBJBUILD)/ditherv2
-r "$(COM) $(CINCD)ditherv2 $(CDEFN)DATA_2 $(CDEFN)ITERATIONS=$(ditherv2data2)"

ditherv2/*.c

-td  # dump the ditherv2data2 target

-t rotatev2
-o $(OBJBUILD)/rotatev2
-r "$(COM) $(CINCD)rotatev2 $(CDEFN)DATA_2 $(CDEFN)ITERATIONS=$(rotatev2data2)"

rotatev2/*.c

-td  # dump the rotatev2data2 target

# Remove all libraries
-tax
-tex

# Restore Harness Libraries
-ta "$(THOBJS)"
-te "$(THLIB)"

# Add Examples Library - using compiled-inits
#-ta "$(OBJBUILD)/gs8/libexamples/libexamples$(LIBTYPE)"
#-te "$(OBJBUILD)/gs8/libexamples/libexamples$(LIBTYPE)"

# Add FONT Library - using compiled-inits
#-ta "$(OBJBUILD)/gs8/libfonts/libfonts$(LIBTYPE)"
#-te "$(OBJBUILD)/gs8/libfonts/libfonts$(LIBTYPE)"

# Add RESOURCE Library - using compiled-inits
#-ta "$(OBJBUILD)/gs8/libresource/libresource$(LIBTYPE)"
#-te "$(OBJBUILD)/gs8/libresource/libresource$(LIBTYPE)"

# Add PostScript Library - useful files are in compiled-inits
#-ta "$(OBJBUILD)/gs8/libps/libps$(LIBTYPE)"
#-te "$(OBJBUILD)/gs8/libps/libps$(LIBTYPE)"

# Add JBIG2 Library - not used
#-ta "$(OBJBUILD)/gs8/libjbig2/libjbig2$(LIBTYPE)"
#-te "$(OBJBUILD)/gs8/libjbig2/libjbig2$(LIBTYPE)"

# Add Jasper Library - not used
#-ta "$(OBJBUILD)/gs8/libjasper/libjasper$(LIBTYPE)"
#-te "$(OBJBUILD)/gs8/libjasper/libjasper$(LIBTYPE)"

# Add JPEG Library
-ta "$(OBJBUILD)/gs8/libjpeg/libjpeg$(LIBTYPE)"
-te "$(OBJBUILD)/gs8/libjpeg/libjpeg$(LIBTYPE)"

# Add PNG Library
-ta "$(OBJBUILD)/gs8/libpng/libpng$(LIBTYPE)"
-te "$(OBJBUILD)/gs8/libpng/libpng$(LIBTYPE)"

# Add ZLIB Library
-ta "$(OBJBUILD)/gs8/libz/libz$(LIBTYPE)"
-te "$(OBJBUILD)/gs8/libz/libz$(LIBTYPE)"

# Add ICC Library
-ta "$(OBJBUILD)/gs8/libicc/libicc$(LIBTYPE)"
-te "$(OBJBUILD)/gs8/libicc/libicc$(LIBTYPE)"

# Add IJS Library - not used
#-ta "$(OBJBUILD)/gs8/libijs/libijs$(LIBTYPE)"
#-te "$(OBJBUILD)/gs8/libijs/libijs$(LIBTYPE)"

# End of Additional Library Section
-te "$(LINKER_LAST)"

-t gs8
-o $(OBJBUILD)/gs8

-g stub_autoconf.c
# Cruft, makerule doesn't parse pre-processor directives.
-g alloc.h
-g sgidefs.h
-g jas_image.h

# Harness redirect files
-g thstdio.h
-g thassert.h
-g thdirent.h
-g therrno.h
-g thfcntl.h
-g thmalloc.h
-g threent.h
-g thstat.h
-g thstdio.h
-g thstdlib.h
-g thstring.h
-g thtypes.h
-g thunistd.h

-Igs8/preconfig
-Igs8/include
-Igs8/src
-Igs8/jpeg
-Igs8/libpng
-Igs8/icclib
-Igs8/zlib
#-Igs8/ijs

-r "$(COM) $(GSOPTS) $(GSINCS)"

gs8/*.c
gs8/ee_srcs_gs.inc
gs8/preconfig/gconfig.c
gs8/preconfig/gscdefs.c
gs8/preconfig/iconfig.c
gs8/preconfig/gsromfs.c

-i srcs_libs.inc

-td  # dump the gs8 target

# End Benchmark Executable Section

# Remove all libraries
-tax
-tex
-tx
-gx  # flush ignore file list

# Library Section

# Redirection header files for new benchmarks.
-g thassert.h
-g thdirent.h
-g therror.h
-g thmalloc.h
-g threent.h
-g thstat.h
-g thstdio.h
-g thstring.h
-g thtypes.h
-g thtime.h
-g thunistd.h
-g thstdlib.h
-g therrno.h
-g thfcntl.h
-g thconfig.h
-g thstdint.h

-co $(OBJOUT)
-tb $(LIBTYPE)
-tr "$(LIBRARY)"
-ce $(LIBOUT)

-t libjpeg
-to $(OBJBUILD)/gs8/libjpeg
-o $(OBJBUILD)/gs8/libjpeg
-r "$(COM) $(GSINCS) $(AVOID_CURDIR_INC) "

-I gs8/preconfig
-I gs8/libpng
-I gs8/zlib
-I gs8/jpeg 

gs8/ee_srcs_libjpeg.inc

-td # dump the libjpeg target, and flush targets
-tx
-gx

# Redirection header files for new benchmarks.
-g thassert.h
-g thdirent.h
-g therror.h
-g thmalloc.h
-g threent.h
-g thstat.h
-g thstdio.h
-g thstring.h
-g thtypes.h
-g thtime.h
-g thunistd.h
-g thstdlib.h
-g therrno.h
-g thfcntl.h
-g thconfig.h
-g thstdint.h

# Test programs with main routines

-t libz
-to $(OBJBUILD)/gs8/libz
-o $(OBJBUILD)/gs8/libz
-r "$(COM) $(GSINCS)"
-I gs8/preconfig
-I gs8/zlib

gs8/ee_srcs_libzlib.inc

-td # dump the libz target, and flush targets
-tx
-gx

# Redirection header files for new benchmarks.
-g thassert.h
-g thdirent.h
-g therror.h
-g thmalloc.h
-g threent.h
-g thstat.h
-g thstdio.h
-g thstring.h
-g thtypes.h
-g thtime.h
-g thunistd.h
-g thstdlib.h
-g therrno.h
-g thfcntl.h
-g thconfig.h
-g thstdint.h

-g alloc.h
-g sgidefs.h

# Source code files to ignore
-g example.c

-t libpng
-to $(OBJBUILD)/gs8/libpng
-o $(OBJBUILD)/gs8/libpng
-r "$(COM) $(GSINCS)"
-I gs8/preconfig
-I gs8/libpng
-I gs8/zlib

gs8/libpng/png.c
gs8/libpng/pngmem.c
gs8/libpng/pngerror.c
gs8/libpng/pngset.c
gs8/libpng/pngtrans.c
gs8/libpng/pngwrite.c
gs8/libpng/pngwtran.c
gs8/libpng/pngwutil.c
gs8/libpng/pngwio.c 

-td # dump the libpng target, and flush targets
-tx
-gx

# Redirection header files for new benchmarks.
#-g thassert.h
#-g thdirent.h
#-g therror.h
#-g thmalloc.h
#-g threent.h
#-g thstat.h
#-g thstdio.h
#-g thstring.h
#-g thtypes.h
#-g thtime.h
#-g thunistd.h
#-g thstdlib.h
#-g therrno.h
#-g thfcntl.h
#-g thconfig.h
#-g thstdint.h
#
#-g thlib.h
#-g thcfg.h
#-g eembc_dt.h
#
## File Library Section
#
## Build files without harness dependencies (no BMDEPS)
#-ax
#-a ${ARDEPS}


#-t libfonts
#-to $(OBJBUILD)/gs8/libfonts
#-o $(OBJBUILD)/gs8/libfonts
#-r "$(COM)"
#
#-I gs8/libfonts
#
#gs8/libfonts/*.c
#
#-td # dump the libfonts target, and flush targets
#-tx
#-gx

# Redirection header files for new benchmarks.
-g thassert.h
-g thdirent.h
-g therror.h
-g thmalloc.h
-g threent.h
-g thstat.h
-g thstdio.h
-g thstring.h
-g thtypes.h
-g thtime.h
-g thunistd.h
-g thstdlib.h
-g therrno.h
-g thfcntl.h
-g thconfig.h
-g thstdint.h

-g sgidefs.h

-t libicc
-to $(OBJBUILD)/gs8/libicc
-o $(OBJBUILD)/gs8/libicc
-r "$(COM)"

-I gs8/icclib

gs8/icclib/icc.c 

-td # dump the libicc target, and flush targets
-tx
-gx

# Redirection header files for new benchmarks.
#-g thassert.h
#-g thdirent.h
#-g therror.h
#-g thmalloc.h
#-g threent.h
#-g thstat.h
#-g thstdio.h
#-g thstring.h
#-g thtypes.h
#-g thtime.h
#-g thunistd.h
#-g thstdlib.h
#-g therrno.h
#-g thfcntl.h
#-g thconfig.h
#-g thstdint.h
#
#-g sgidefs.h
#
#-t libijs
#-to $(OBJBUILD)/gs8/libijs
#-o $(OBJBUILD)/gs8/libijs
#-r "$(COM)"
#
#-I gs8/ijs

#gs8/ijs/ijs.c
#gs8/ijs/ijs_client.c
#gs8/ijs/ijs_exec_unix.c
#gs8/ijs/ijs_server.c

#-td # dump the libijs target, and flush targets
#-tx
#-gx

# Redirection header files for new benchmarks.
-g thassert.h
-g thdirent.h
-g therror.h
-g thmalloc.h
-g threent.h
-g thstat.h
-g thstdio.h
-g thstring.h
-g thtypes.h
-g thtime.h
-g thunistd.h
-g thstdlib.h
-g therrno.h
-g thfcntl.h
-g thconfig.h
-g thstdint.h

-g thlib.h
-g thcfg.h
-g eembc_dt.h

-g libpgm_single.c
-g libpgm_init.c

-t libpgm
-to $(OBJBUILD)/libpgm
-o $(OBJBUILD)/libpgm
-r "$(COM)"

-I libpgm

libpgm/*.c

-td # dump the libpgm target, and flush targets
-tx
-gx

# Redirection header files for new benchmarks.
-g thassert.h
-g thdirent.h
-g therror.h
-g thmalloc.h
-g threent.h
-g thstat.h
-g thstdio.h
-g thstring.h
-g thtypes.h
-g thtime.h
-g thunistd.h
-g thstdlib.h
-g therrno.h
-g thfcntl.h
-g thconfig.h
-g thstdint.h

-g thlib.h
-g thcfg.h
-g eembc_dt.h

-g libtxt_single.c
-g libtxt_init.c

-t libtxt
-to $(OBJBUILD)/libtxt
-o $(OBJBUILD)/libtxt
-r "$(COM)"

-I libtxt

libtxt/*.c

-td # dump the libtxt target, and flush targets
-tx
-gx

# Redirection header files for new benchmarks.
-g thassert.h
-g thdirent.h
-g therror.h
-g thmalloc.h
-g threent.h
-g thstat.h
-g thstdio.h
-g thstring.h
-g thtypes.h
-g thtime.h
-g thunistd.h
-g thstdlib.h
-g therrno.h
-g thfcntl.h
-g thconfig.h
-g thstdint.h

-g thlib.h
-g thcfg.h
-g eembc_dt.h

-g libbez_single.c
-g libbez_init.c

-t libbez
-to $(OBJBUILD)/libbez
-o $(OBJBUILD)/libbez
-r "$(COM)"

-I libbez

libbez/*.c

-td # dump the libbez target, and flush targets
